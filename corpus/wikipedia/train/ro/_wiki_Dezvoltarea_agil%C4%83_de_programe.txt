Dezvoltarea flexibilă de programe este o familie de metodologii de project management în ingineria software, bazată pe dezvoltarea incrementală și care îmbrățișează și promovează schimbările ce evoluează de-a lungul întregului ciclu de viață al unui proiect. Aceste metodologii se caracterizează prin divizarea problemei în subprobleme mici și planificarea lor pe durate scurte. Se evită planificarea în detaliu pe termen lung, deoarece inerent în dezvoltarea de software apar întârzieri frecvente din cauza schimbărilor și detalierii cerințelor clientului. Scopul principal este ca, la terminarea fiecărui ciclu de dezvoltare  să existe o versiune cât de cât funcțională  a software-ului dezvoltat .
O altă caracteristică importantă este comunicarea frecventă între membrii echipei, care, în multe cazuri, se întâlnesc într-o scurtă ședință zilnică, denumită stand-up sau scrum  în care fiecare prezintă pe scurt progresul său în ultima zi de lucru și problemele cu care s-a confruntat. Acestora li se alătură și un reprezentant al clientului, care trebuie să fie informat de aspectele dezvoltării, pentru a ști ce modificări este realist să ceară și cât de mult ar putea costa ele. Astfel, toată lumea are cunoștințe despre fiecare aspect al dezvoltării aplicației și poate prelua munca altuia sau ajuta pe altcineva.
Dezvoltarea flexibilă de programe promovează planificarea adaptivă, dezvoltare evolutivă, livrarea rapidă, îmbunătățirea continuă, și încurajează răspunsul rapid și flexibil la schimbări. 1  Este un cadru conceptual care se concentrează pe furnizarea de software funcțional cu un minimum de muncă. 2   3  4 
Agile Manifesto, manifestul care a enunțat pentru prima dată conceptele care stau la baza dezvoltării agile, a introdus termenul în 2001. 5 
Agile Manifesto se bazează pe douăsprezece principii: 6 
Există mai multe metode specifice de dezvoltare flexibilă. Cele mai multe promovează dezvoltarea, munca în echipă, colaborarea, și adaptabilitatea procesului pe tot parcursul ciclului de viață al proiectului.
Cele mai multe metode agile descompun sarcinile în etape mici, cu planificare minimă și care nu implică în mod direct o planificare pe termen lung. Iterațiile sunt termene scurte care durează de obicei între una și patru săptămâni. Fiecare iterație implică o echipă inter-funcțională de lucru în toate funcțiile: planificare, analiza cerințelor, proiectare, codificare, unitate de testare, și testarea de acceptare. La sfârșitul iterației are loc o demonstrație a produsului în fața beneficiarului. Acest lucru minimizează riscul global și permite proiectului să se adapteze la schimbările rapide. 7  O iterație s-ar putea să nu adauge suficientă funcționalitate pentru a justifica o lansare pe piață, dar scopul este de a avea o lansare disponibilă  la sfârșitul fiecărei iterații. 8  Iterații multiple ar putea fi necesare pentru a lansa un produs sau noi caracteristici. 6 
Indiferent de disciplinele de dezvoltare necesare, fiecare echipă agilă va conține un reprezentant al clientului. Această persoană este numită de către părțile interesate să acționeze în numele lor și face un angajament personal de a fi disponibilă pentru dezvoltatori pentru a răspunde la întrebări în timpul iterației. La sfârșitul fiecărei iterații, părțile interesate analizează progresele și re-evaluează prioritatile, pentru a optimiza rentabilitatea investiției și asigurarea alinierii cu nevoile clientului și obiectivele companiei. 9 
În dezvoltarea flexibilă de software, un radiator de informații este un afișaj fizic vizibil  situat vizibil într-un birou. Acesta prezintă un rezumat actualizat al stării proiectului software sau a altui produs aflat în lucru. 10  11  Numele a fost inventat de către Alistair Cockburn, și este descris în cartea sa din 2002, Agile Software Development. Alternativ, poate fi utilizat un indicator luminos de construcții  pentru a informa o echipă despre starea actuală a proiectului lor.
O caracteristică comună în dezvoltarea flexibilă sunt întâlnirile zilnice privind evoluția. Într-o scurtă ședință, membrii echipei raportează între ei ce au făcut în ziua precedentă, ce intenționează să facă în ziua respectivă, și ce obstacole întâmpină. 12 
Instrumente și tehnici specifice, cum ar fi integrarea continuă, unitate de testare automatizată, programare pereche, dezvoltare condusă prin teste, modele de design, design în funcție de domeniu, reingineria codului, și alte tehnici, sunt adesea folosite pentru a îmbunătăți calitatea și a spori agilitatea proiectului. 13  14 
