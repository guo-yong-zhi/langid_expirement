Bash je v informatice jeden z unixových shellů, který interpretuje příkazový řádek. Bash naprogramoval Brian Fox pro projekt GNU. Název je akronym pro Bourne again shell, což poukazuje na jeho základ v dříve nejpoužívanějším unixovém shellu Bourne shell . Někdy se tento název také uvádí jako slovní hříčka odkazující na křesťanské znovuzrození  nebo jako stlučení  všech výhod sh, csh a ksh.
Brian Fox začal pracovat na Bashi 10. ledna 1988 poté, co začal být Richard Stallman nespokojený s pomalým postupem jeho hlavního vývojáře shellu. Stallman a celá jeho nadace Free Software Foundation  považovaly volně šiřitelný bash, který dokáže zpracovat již existující skripty pro sh, za tak klíčový a důležitý pro dokončení jejich volně šiřitelného systému postaveného na BSD a GNU kódu, že se tento projekt stal jedním z mála, které FSF financovala z vlastních zdrojů a Brian Fox se stal vedoucím tohoto projektu a zaměstnancem FSF. První betaverzi číslo .99 vydal Brian Fox 7. června 1989 a zůstal v pozici hlavního správce projektu Bash až do první poloviny roku 1994, kdy byl z FSF propuštěn a odpovědnost za projekt převzal jeho bývalý spolupracovník Chet Ramey.
Bash je POSIX shell s řadou rozšíření. Je koncipován pro operační systémy založené na projektu GNU a je možné ho spustit na většině unixových operačních systémů. Je používán jako implicitní příkazový interpret v systémech postavených na linuxovém jádře, stejně jako i v Mac OS X nebo v systému Darvin. Je možné ho použít i v systému Microsoft Windows za použití subsystému pro unixové aplikace , nebo emulace POSIX pomocí softwaru Cygwin a MSYS. Projekt DJGPP jej pak umožňuje pustit i v systému DOS.
Základ syntaxe příkazů v Bashi je převzat z původního Bourne shellu. Také převážná většina sh skriptů je v Bashi spustitelná bez jakékoliv modifikace kódu až na pár výjimek, které vznikají jinou interpretací méně používané syntaxe příkazů nebo jinou implementací těchto systémových příkazů. Bash navíc převzal nápady z Korn shellu  a C shellu , jako jsou například editace jednotlivých řádků, historii příkazů, proměnné $RANDOM a $PPID a POSIXové dynamické vkládání příkazů pomocí syntaxe $. Při psaní syntaxe nám pak práci nejvíce ulehčí stisk klávesy tabulátor, čímž Bash automaticky doplní konec napsaného příkazu, cesty k souboru nebo proměnné, případně nám ukáže všechny možnosti doplnění.
Na rozdíl od Bourne shellu má Bash mnoho rozšíření i v syntaxi příkazů. Například dokáže provádět celočíselné operace bez volaní externích procesů. Za tímto účelem byla vytvořena syntaxe )  a $) . Bash také zjednodušil přesměrování vstupů a výstupů tak, jak to v tradičním Bourn shellu nebylo možné. Například přesměrování standardního výstupu a standardního chybového výstupu v tu samou chvíli lze udělat operátorem &>.
Bash podporuje také here dokumenty stejně jako Bourne shell. Nicméně od verze 2.05b dokáže Bash přesměrovat standardní vstup z „here-řetězce“ pomocí operátoru <<<.
Bash verze 3.0 podporuje regulární výrazy se syntaxí podobnou Perlu.
Bash verze 4.0 podporuje asociativní pole, která umožňují vytvářet náhradu za vícerozměrná pole:
    declare    -A   a    # deklaruje asociativní pole  a  
 i  =  1  ;     j  =  2     # inicializuje nějaké proměnné s hodnotami 
a =  5     # asociuje hodnotu "5" s klíči "$i,$j"  
 echo     $     # vypíše uložené hodnoty na klíči "$i,$j" 
    echo    a  e    # ape ace ade abe 
 echo          # ad ae af bd be bf cd ce cf 
    # Klasický shell nevytvoří stejný výstup, expanzi nepodporuje 
 echo    a  e    # ae 
   ls   *.      # rozšíří na *.jpg *.jpeg *.png - a poté, 
    # se vyhledají soubory odpovídající zástupným znakům 
</prKdyž Bash startuje, vykoná příkazy v několika různých skriptech.
Pokud je spuštěn za účelem přihlášení uživatele , nejdříve vykoná příkazy ze souboru /etc/profile, pokud takovýto soubor existuje. Následně vyhledá skriptovací soubory ~/.bash_profile, ~/.bash_login a ~/.profile  a pokud je soubor nalezen a je povoleno z něj číst, provede příslušný skript.
Pokud je uživatel ze shellu odhlášen, vyhledá se a provede se skript ze souboru ~/.bash_logout, pokud existuje.
Pokud je Bash spuštěn bez přihlášení uživatele, vykonají se skripty ze souboru ~/.bashrc. Vykonávání tohoto skriptu lze zamezit parametrem --norc při spouštění Bashe. Parametrem --rcfile soubor pak donutíme Bash vykonat námi zvolený skript soubor místo standardního ~/.bashrc.
Některé verze Unixu obsahují speciálně upravené systémové skripty pro Bash, které schválně změní pořadí zmiňovaných skriptů tím, že spustí některé skripty dříve nebo nakombinují spouštění Bashe se startovacími skripty z jiných shellů různými způsoby.
Shellové skripty napsané podle specifikací Bashe  nebudou spolehlivě fungovat na systému, který využívá Bourne shell nebo nějakou z jeho náhražek, pokud nebude na takovém systému nainstalován také Bash a daný skript nebude na začátku obsahovat speciální příkaz  obsahující #!/bin/bash místo standardního #!/bin/sh .
Bash pro editování příkazového řádku využívá knihovnu GNU Readline, která nabízí pro editaci představenou sadu klávesových zkratek inspirovaných textovým editor Emacs. Příkazem set -o vi lze přepnout na přednastavenou sadu klávesových zkratek inspirovanou editorem Vi.
K tomu má Bash navíc své vlastní klávesové zkratky, například Ctrl-c odesílá signál SIGINT právě probíhající úloze, který způsobí její přerušení a zavření, Ctrl-d odešle příznak EOF , který  zavře právě aktivní shell , a Ctrl-z odešle signál SIGTSTP právě probíhající úloze, který úlohu pozastaví. Pro zrušení pozastavení slouží příkaz fg .
Sám Bash obvykle běží jako součást terminálového programu, který může některé klávesové zkratky odchytávat a zpracovávat a Bashi je nepředat.
V září 2014 byla v Bashi objevena závažná zranitelnost  později označovaná jako Shellshock. 2  Kvůli této chybě Bash nesprávně provádí libovolný kód, pokud je zvláštním způsobem zapsán v proměnných prostředí. Jelikož se Bash používá pro provádění skriptů ve velkém množství internetových služeb, jako jsou například webové servery, a některým skriptům  se uživatelský vstup předává právě ve formě proměnných prostředí, znamená tato chyba, že kdokoli, kdo je schopen na zranitelný stroj poslat nějaký požadavek, může na tomto stroji provádět libovolné příkazy. Tato chyba navíc v Bashi existovala zhruba od roku 1992. 2 
Po urychleném vydání bezpečnostních aktualizací následovalo odhalení dalších souvisejících zranitelností v syntaktickém analyzátoru v Bashi a jejich postupné záplatování.
