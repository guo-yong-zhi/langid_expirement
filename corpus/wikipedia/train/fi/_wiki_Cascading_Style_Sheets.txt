Cascading Style Sheets  on erityisesti verkkosivuille kehitetty tyylisivu. CSS:ssä dokumentille voi määritellä useita tyyliohjeita, jotka yhdistetään tietyllä tavalla yhdeksi säännöstöksi. CSS-tiedostojen pääte on yleensä .css
CSS:llä annetut säännöt ehdottavat, kuinka dokumentti voidaan esittää. Säännöt eivät siis ole ehdottomia, vaan ne voi halutessaan kiertää. Jotkin säännöt saattavat korvautua toisten tyyliohjeiden vastaavilla säännöillä. Esimerkiksi dokumentissa annetut ohjeet ovat yleensä toissijaisia dokumentin vastaanottajan ohjeisiin verrattuna.
CSS:llä voidaan kuvata monipuolisesti näkyvää esitysmuotoa, ja periaatteessa myös äänen esitystapaa. Äänisyntetisaattoreita varten on määritelty muun muassa äänen korkeutta, painotusta ja äänenväriä sääteleviä ominaisuuksia, joskin ne on toteutettu varsin suppeasti. Visuaalisen esitystavan perusta on niin sanottu laatikkomalli . Jokainen dokumentin elementti käsitetään mallissa laatikoksi, joka sijoitetaan ympäröivän elementin laatikon sisään muiden saman tason elementtien vierelle. Elementti voi kuitenkin tuottaa myös useita laatikoita. Kullakin elementillä on neljä sisäkkäistä laatikkoa, joista uloin on marginaali eli reunus; sen sisällä on reunaviiva tai -kuvio, joka rajoittuu sisäpuolelta sisältöä ympäröivään täytteeseen. Sisältölaatikossa on kuvattavan elementin sisältö.
CSS:ää käytetään luonnollisesti HTML:n ja XHTML:n kanssa, mutta se sopii yhtä lailla muidenkin rakenteisten dokumenttien  tyyliohjeeksi.
Norjalainen Håkon Wium Lie ehdotti CSS:sää ensimmäistä kertaa vuonna 10 lokakuuta 1994. Tähän aikaan Lie työskenteli CERN:lle.  Useita muita tyyli kieliä nettisivuille suositeltiin lähes samoihin aikoihin ja keskustelu julkisilla sähköpostilistoilla World Wide Web Consortium:in sisällä johti ensimmäiseen W3C CSS suositukseen , joka julkaistiin 1996. Bert Bos teki erityisen merkittäviä ehdotuksia, minkä seurauksena hänestä tuli CSS1:sen toinen kirjoittaja ja häntä pidetään toisena CSS:n luojana. 
Tyylisivut ovat olleet olemassa tavalla tai toisella jo standardoitu yleinen merkintäkieli   alkuajoilta noin 1980 luvulla ja CSS oli luotu tarjoamaan tyylisivuja koko netille. Yhtenä nettisivujen tyylisivukielen vaatimuksena oli että sen voi saada useasta eri lähteestä internetissä. Sen takia jo olemassa olevat tyylisivukielet, kuten DSSSL ja FOSI, eivät olleet käyttökelpoisia. CSS puolestaan antoi dokumentti tyylin vaikuttaa useisiin tyylisivuihin ajamalla ohjeet peräkkäin.
HTML kasvaessa, sen tuli täyttää laajemman valikoiman erilaisia tyyliominaisuuksia, jotta eri netti kehittäjät halusivat. Tämä evoluutio antoi suunnittelijoille enemmän hallintaa sivun näyttävyydestä monimutkaisemman HTML hinnalla. Nettiselaimien implementoimisen variaatot, kuten ViolaWWW ja WorldWideWeb,, tekivät yhtenäisen sivun ulkonäön vaikeaksi ja käyttäjillä oli vähemmän hallintaa, kuinka nettisivun sisältö näytetään. Tim Berners-Lee kehitti nettisivun editointityökalun jossa oli kova koodatut tyylisivut. Tyylisivuja ei täten pystynyt linkittämään dokumentteihin netissä. Robert Cailliau,halusi erotella rakenteen niin että eri tyylisivut voisivat vaikuttaa eri tulosteisiin, ruudulla näkyviin esityksiin ja editoreihin.
Ensimmäinen versio, CSS 1, julkaistiin vuonna 1996. CSS 2 julkaistiin vuonna 1998 ja se sisälsi paljon virheitä, jotka lopulta korjattiin vuonna 2011, kun CSS 2.1 julkaistiin World Wide Web Consortium:in virallisena suosituksena.
CSS 3:a alettiin kehittää vuonna 1998. Se erosi edeltäjistään siten, että se julkaistiin yhden määritelmän sijaan erillisinä moduuleina. Jokainen moduuli käsitteli suhteellisen pientä osaa määritelmästä, ja moduulit joko lisäsivät uusia ominaisuuksia tai kehittivät ja laajensivat vanhoja ominaisuuksia. Kehityksessä pyrittiin taaksepäin suuntautuvaan yhteensopivuuteen edellisten versioiden kanssa. 
CSS 3:a kehitetään edelleen. Moduulit kuitenkin mahdollistavat sen, että riittävän vakaille moduuleille voi antaa Candidate Recommendation  statuksen. CSS 3 ei ole tuettu kaikissa selaimissa, mutta useimmat selaimet tukevat CR-statuksen saaneita moduuleja. Moduulit luokitellaan CSS-tason perusteella. Suurin osa kehitteillä sekä ylläpidossa olevista moduuleista on tason 3 moduuleja, sillä ne rakennetaan tason 2 eli CSS 2.1:n ominaisuuksien päälle. Kokonaan uusia toiminnallisuuksia lisäävät moduulit kuitenkin luokitellaan tason 1 moduuleiksi.
Myös CSS 4:n kehitys on alkanut ja se käyttää samaa moduuli-määritelmää. Tason 4 moduulit kehittävät ja laajentavat tason 3 moduuleja. 2  3 
World Wide Web Consortium  ylläpitää CSS-kielien määritelmiä. 1  Alkuperäinen määrittely oli CSS 1, jolla on vain historiallinen merkitys. Nykyisin vakiintuneet ja lähes kaikissa selaimissa toteutetut ominaisuudet on kuvattu määrittelyssä CSS 2.1. ”CSS 3” on yleisnimitys valmiusasteeltaan ja luonteeltaan hyvin erilaisille määrittelyille.
Osa ominaisuuksista on suunniteltu osittain korvaamaan Java-sovelmat ja Flash.
CSS4:lle ei ole vielä yhtä tiettyä versiota, sillä se on jaettu useisiin osiin, joita päivitetään erillään.
Osa osista, joita alettiin kehittää CSS2 pohjalta aloittivat tasolta 3, osa niistä on jo saavuttanut tason 4 ja lähestyy tasoa 5. Muut osat, jotka hyödyntävät täysin uutta Flexbox toiminnallisuutta ovat alkaneet tasolta 1 ja lähestyvät tasoa 2.
CSS työryhmä julkaisee ajoittain kokoelmia CSS4:n valmiista osista, jotka koetaan käyttövalmiiksi. Tällaisia kokoelmia on tähän mennessä julkaistu 5 kappaletta; vuosina 2007, 2010, 2015, 2017 ja 2018.
Verkkoselaimet käyttävät eri selainmoottoreita verkkosivujen esittämiseen, josta johtuen eri selaimet voivat käsitellä CSS:n eri tavoin. Tiettyjä selaimia varten on kehitetty väliaikaisia korjauksia , joilla saavutetaan nettisivujen yhtenäinen ulkonäkö selaimissa, joissa ei ole yhdensopivaa renderöintiä. 
Mikäli ei halua tyytyä vain väliaikaisiin korjauksiin, voi olla kannattavaa pyrkiä käyttämään vain niitä ominaisuuksia, jotka ovat yhteensopivia mahdollisimman monen nykyään yleisen verkkoselaimen, kuten Google Chrome, FireFox, Safari  ja Microsoft Edge kanssa. Web-kehittäjien avuksi on tähän tarkoitukseen kehitetty ilmaisia verkkosivuja, joilla voi helposti tarkistaa tietyn ominaisuuden yhteensopivuuden käytetyn selaimen kanssa ennen käyttöä. 
Yksi esimerkki tällaisesta sivustosta Alexis Deverian rakentama ja ylläpitämä verkkosivusto Can I use, jota nykyisin voivat päivittää myös muut verkkokehitysyhteisöön kuuluvat kehittäjät GitHub-palvelun kautta tai äänestämällä puuttuvaa ominaisuutta verkkosivulla  4   5  . Sivustolla on CSS:n lisäksi mahdollista tarkistaa web-kehityksen kannalta olennaisten HTML5:n ja JavaScript:n ominaisuuksien yhteensopivuutta. Can I use-verkkosivu tekee myös yhteistyötä BrowserStackin kanssa, jolloin ominaisuuksien testaaminen ei rajoitu vain yleisimpiin selaimiin.  6   
Myös w3schools.com sivusto tarjoaa aakkosittaisen listauksen CSS:n kolmannen version ominaisuuksista ja selainversioista, joilla ne ovat ensimmäisen kerran tuettu 7 . CSS:n toiminnallisuuksien selain yhteensopivuuden tarkistaminen tällaisten sivustojen avulla voi siis auttaa määrittelemään minimivaatimukset käytettäville selainversiolle ja helpottaa verkkosivujen testaamista kehitysvaiheessa.     
Merkittävien selainten tuen puute voi olla este uusien CSS:n toiminnallisuuksien omaksumiselle. Esimerkiksi Internet Explorer ei tukenut CSS 3 ominaisuuksia, mikä hidasti näiden ominaisuuksien omaksumista ja samalla vahingoitti selaimen mainetta kehittäjien keskuudessa 8 . Yhtenäisen käyttäjäkokemuksen varmistamiseksi verkkokehittäjät yleensä testaavat sivustojaan useilla käyttöjärjestelmillä, selaimilla ja selainversioilla. Tämä puolestaan nostaa sivustojen kehitysaikaa ja monimutkaisuutta. Ohjelmistotyökaluja, kuten BrowserStack voidaan käyttää tällaisten kehitysympäristöjen ylläpitoon. Tilapäiset korjaukset ja usean vanhemman selainversion tuen ylläpito voivat nostaa ohjelmistokehitysprojektien monimutkaisuutta ja tästä syystä useat ohjelmistoyritykset määrittelevät listan selainversioista joita heidän ohjelmistonsa tukee.
Kun nettisivut ottavat käyttöön uudempaa koodia joka ei ole yhteensopiva vanhempien selainten kanssa, nämä selaimet eivät pääse enää käsiksi moniin verkon resursseihin. Monet modernit sivustot näyttävät erilaisilta vanhoilla selaimilla ja tämän lisäksi eivät välttämättä toimi ollenkaan, johtuen JavaSriptin ja muun verkkoteknologian kehityksestä. 9 
Sisällön erottaminen esitysmuodosta
CSS mahdollistaa sisällön julkaisemisen useissa muodoissa nimellisparametreihin perustuen. Nimellisparametrit ovat selkeitä käyttäjään ja käyttöympäristöön sidottuja muuttujia kuten käyttäjäkohtaiset mieltymykset, eri selainten tiedot, katselulaitteen tyyppi  ja käyttäjän maantieteellinen sijainti.
Sivuston yhdenmukaisuus
CSS:n käyttö on tehokkainta periytymisen ja peräkkäisyyden  ollessa kunnossa, jolloin voidaan koko sivuston ulkoasuun vaikuttaa yhdellä globaalilla tyylisivulla. Tämä mahdollistaa siis yksittäisten elementtien säätämisen tai muuttamisen muokkaamalla tyylisivulla olevia sääntöjä. Ennen CSS:n kehitystä, tällainen ylläpito oli haastavaa ja aikaa vievää.
Kaistanleveys
Tyylisivu, olipa se sisäinen tai ulkoinen, määrittää elementin tyylin kerran HTML:n määrittämälle alueelle luokan, tyypin tai suhteen mukaan. Tällä saavutetaan suurempi tehokkuus, sillä tyylitietoa ei tarvitse määrittää jokaiselle elementin instanssille. Yleensä ulkoinen tyylisivu tallennetaan selaimen välimuistiin, jolloin samaa tyylisivua voidaan hyödyntää useilla sivuilla ilman uudelleen latausta. Tämä menettelytapa vähentää verkkoyhteydelle aiheutuvaa kuormaa.
Sivuston ulkoasun uusinta
Vaihtamalla yksi rivi, voidaan koko sivuston ulkoasu muuttaa kerralla aivan toisenlaiseksi, pitäen sisällön samana. Tämä parantaa sivuston saavutettavuutta sekä pystytään sovittamaan sivuston ulkoasua eri kokoisille ja tyyppisille laitteille. Mikäli laite ei kykene tunnistamaan elementtien tyylejä niin sisältö silti näytetään käyttäjälle.
Saavutettavuus
Ilman CSS:ää, kehittäjät joutuvat yleensä rakentamaan sivuston erilaisten tekniikoiden avulla, jotka hankaloittavat sivuston käyttöä näkövammaisille. Esimerkki tällaisesta tekniikasta on HTML-taulukko.
Tehokas ja kompakti koodi
CSS mahdollistaa ulkoasun tyylien määrittämisen lyhyellä ja tiiviillä koodilla. Voit hyödyntää valmiita tyyliluokkia ja id-attribuutteja, mikä vähentää tarvetta toistaa samaa koodia useaan otteeseen. CSS:ssä voit myös käyttää lyhyitä syntaksimuotoja, kuten lyhyitä värejä tai yksiköitä, mikä pienentää tiedostokokoa ja parantaa sivuston latausnopeutta ja toimivuutta.
Animointi ja interaktiivisuus
CSS tarjoaa monia ominaisuuksia, jotka mahdollistavat animaatioiden ja interaktiivisten elementtien luomisen ilman JavaScriptin käyttöä. Voit luoda siirtymiä, muodonmuutoksia, animoituja liikkeitä ja hover-efektejä ja transformaatioita jotka parantavat käyttäjäkokemusta ja tekevät sivustosta elävämmän ja dynaamisemman. CSS-transformaatiot esimerkiksi antavat sinulle mahdollisuuden muuttaa elementtien kokoa, sijaintia, kiertämistä ja vääristymiä. Voit skaalata, kääntää, kallistaa tai vääristää elementtejä, mikä avaa monia luovia mahdollisuuksia animaatioihin. Transformaatiot voidaan yhdistää siirtymiin ja avainkehyksiin luodaksesi monimutkaisempia ja dynaamisempia animaatioita.
Helppo päivitettävyys
CSS:n erillisenä tiedostona pitäminen mahdollistaa sen helpon päivittämisen. Voit muuttaa tyylisivua tarpeen mukaan ilman, että sinun tarvitsee muokata itse sivuston sisältöä. Tämä säästää aikaa ja vaivaa päivitysten tekemisessä ja mahdollistaa nopean ulkoasun muokkaamisen esimerkiksi uuden designin suunnittelun tai brändin mukaisesti.
Laajennettavuus
CSS tarjoaa mahdollisuuden luoda omia tyylisääntöjä ja laajentaa tyylien toiminnallisuutta. Voit hyödyntää CSS:n jatkeita, kuten Sassia tai Lessiä, jotka tuovat mukanaan muuttujia, funktioita ja sisäkkäisyyksiä. Tämä helpottaa tyylien hallintaa ja kehitystyötä, sillä voit käyttää uudelleen käyttökelpoisia tyylisääntöjä ja tehdä tyylistäsi modulaarisempaa.
CSS:n perussyntaksi muodostuu selektorista eli valitsimesta, ominaisuudesta ja arvosta.
    selektori      
    /* Leipätekstin fontin määritys ja tasaus */ 
 p      
 /* Linkit lihavoidaan, mutta ei alleviivata */ 
 a      
 /* Kursorin alla olevan linkin tausta mustaksi ja teksti valkoiseksi 
  24-bittisellä heksakoodilla määritettyinä */ 
 a  :  hover      
    p      
 <p>
   Tämä esimerkki <em>havainnollistaa</em> periytymistä
</p>    /* Todella pienet laitteet  */ 
 @  media     screen     and           
 /* Pienet laitteet  */ 
 @  media     screen     and           
 /* Keskikokoiset laitteet  */ 
 @  media     screen     and           
 /* Suuret laitteet  */ 
 @  media     screen     and           
 /* Todella suuret laitteet  */ 
 @  media     screen     and           
</pr 13 
Suunnittelu kannattaa aloittaa mobiililaitteista ja edetä niistä suurempia laitteita kohti. Esimerkkikoodissa suuruusluokka on ensin asetettu kuuttasataa pikseliä pienemmiksi ja seuraavat sitä suuremmiksi. CSS pystyy havaitsemaan, mihin suuruusluokkaan näytön koko sopii ja toteuttaa verkkosivun asettelun siihen muokatun asettelun mukaan. Esimerkiksi jos näyttö on suurempi kuin 768px mutta pienempi kuin 992px, sen asettelu on keskikokoisten laitteiden mukainen. CSS ei anna suuruusluokkia automaattisesti vaan ne täytyy määritellä itse.
Mediakyselyitä voidaan määritellä enemmänkin esimerkiksi tulostamiseen tai näytönlukemiseen käyttämällä screen tilalla print tai speech.
CSS-animaatiot on julkaisu ensimmäisen kerran vuonna 2009.  14  CSS-animaatiot ovat keino lisätä WWW-sivuille animaatioita helposti JavaScriptiä. CSS-animaatio muokkaa elementin tyyliä toiseen tyyliin. Animaatioilla voidaan animoida CSS:n ominaisuuksia, kuten värejä, leveyksiä, korkeuksia ja tekstin kokoa. Animaatioissa selain toteuttaa animaation määriteltyjen muutoksien mukaan. Animaatioita voi tehdä elementeille kuinka paljon tahansa ja kuinka monta kertaa tahansa.  15 
CSS-animaation rakenne koostuu kahdesta osasta:
CSS-animaation pitää olla sidottuna johonkin elementtiin. Animaatio määritetään @keyframes:in  avulla. Animaatio muuttuu määrätystä lähtötilanteesta määrättyyn lopputilanteeseen määrätyssä ajassa ja mahdollisilla määritetyillä välimuutoksilla. Esimerkiksi animation-duration ominaisuus kertoo missä ajassa animaatio tapahtuu. Muutoksen voi kuvata prosentuaalisesti. Puolessa välissä animaatio voi muuttua, minkä jälkeen se taas jatkuu loppuun.  15 
Esimerkkejä-CSS animaatioiden ominaisuuksista, joita voidaan toteuttaa:
CSS laajentaminen animaatioiden alueelle oli minimaalista aina 2000-luvun ensimmäisen vuosikymmenen loppuun saakka. Vuonna 2007 WebKit oli julkaissut aikeensa sisällyttää CSS animaation, siirtymät, ja muutokset WebKitin ominaisuuksiin. Vuonna 2009 WebKit ilmoitti toteuttavansa sekä implisiittisen että eksplisiittisen animaation CSS käyttäen. CSS-animaatio on myös esitetty osana CSS3:a.
CSS-animaatiot on osa Cascading Style Sheets -moduulia. Se mahdollistaa käyttäjien siirtää kursorin kohteiden päälle ja animaation toistuvan. Tällä hetkellä se on otettu käyttöön kaikissa suurissa hakukoneissa. Huolimatta kritiikistä niiden taholta, jotka suosivat animaatiota Javascriptin kautta, hover-tagia käytetään nyt laajalti Cascading Style Sheets -yhteisössä.
CSS-animaation kehityksen alkuvaiheissa se herätti huolta niissä, jotka suosivat  JavaScript 17  animaatiota tai vähemmän käytettyä Synchronized Multimedia Integration Language  -kieltä; toiset ovat väittäneet, että se on Apple Inc., WebKit-projektin pääsponsorin, yritys kiertää Adobe Flash  sisällyttäminen yhtiön iOS-laitteisiin, jotka käyttävät Safari. 18  19  20 -selainta. Lisäksi, vaikka Cascading Style Sheets on suhteellisen helppokäyttöinen ohjelmointikieli, monet ohjelmoijat kamppailevat silti animaatioiden luomisessa. Tämän ongelman vuoksi useat yksilöt ja verkkosivustot ovat kehittäneet ja luoneet avoimen lähdekoodin CSS-nappianimaatioita koodilla, jonka käyttäjät voivat kopioida. Kuitenkin, huolimatta näistä aikaisemmista kiistoista, CSS-animaatioita voidaan pääosin löytää ja ne ovat laajalti käytössä internetissä.
Kesäkuussa 2011 Firefox 5 sisällytti CSS-animaatio tuen. 21  CSS-animaatio on myös saatavilla moduulina WebKitin nightly build-versioissa sekä Google Chrome, Safari 4 ja 5, Safarille iOS , Android versioille 2.x ja 3.x, Internet Explorer 10+ ja Microsoft Edge -selaimessa, BlackBerry OS 6 -verkkoselaimessa, käyttämällä -webkit- etuliitettä. 22  23  24  Sitä käytetään myös iTunes 9:ssä tukemaan iTunes LP tiedostoja.
HTML sisältää useita mahdollisuuksia elementin asetteluun ja sommitteluun sivulle. Näitä ovat esim. BLOCK, INLINE, taulukot  ja Positioning absoluuttiseen sijoitteluun. 25 
Taitto on sittemmin lisätty osaksi CSS:ää, jolla voi jakaa sisällön palstoihin tai riveille.
CSS:n mahdollisuudet tähän ovat CSS Flexbox  26  ja CSS Grid Layout 27 .
Ennen CSS:n ominaisuuksia ainoat luotettavat tekniikat, jotka toimivat useimmissa selaimissa olivat Positioning ja Floats. 28 
Tärkein ero on, että CSS Grid on kaksiulotteinen, mikä tarkoittaa, että se voi sijoittaa elementtejä samanaikaisesti riveihin ja sarakkeisiin. Flexbox on yksiulotteinen, mikä tarkoittaa, että se voi asetella elementtejä vain vaaka- tai pystysuunnassa, mutta ei molemmissa samanaikaisesti. Grid sopii paremmin monimutkaisiin ja tarkkoihin asetteluihin, kun taas Flexbox on joustavampi ja mukautuu sisällön kokoon. 29 
CSS Grid kehitettiin Microsoftilla ja julkaistiin epävirallisena laajennoksena Internet Explorer 10:ssa. Ominaisuus speksattiin ja luovutettiin W3C:lle 2012. Toteutus ei ollut ensimmäinen, ja sen kilpailijana oli myös Adoben kehittämä CSS Regions. 30 
Lopulta mediayhtiö Bloomberg palkkasi avoimen lähdekoodin kehittäjän toteuttamaan ominaisuuden ja se julkaistiin osana Google Chromea ja Firefox tammikuussa 2017. Kun Microsoft Edge viimein toteutti laajennuksen syksyllä 2017, jokainen merkittävä selain tuki Gridiä. 31 
Flex layoutia ehdotti jo CSS Working Group vuonna 2008 ja ensimmäinen speksin luonnos julkistettiin 2009. Speksi jouduttiin kuitenkin kirjoittamaan uudelleen 2011 sen epämääräisyyden ja toteutuksien heikkouden vuoksi. Vuoden 2012 luonnoksesta tuli W3C:n standardiehdotus, jota vielä uudistettiin 2013. 32 
Lopullinen versio hyväksyttiin vasta marraskuussa 2018. 33 
CSS-ohjelmistokehykset  ovat CSS-kieltä käyttäviä kirjastoja, joiden avulla kehittäjät pystyvät luomaan helposti standardien mukaisen ja yhtenäisen ulkoasun sivustolle. CSS-ohjelmistokehysten sisällöt vaihtelevat laajasti, mutta ne sisältävät yleisesti tyylimääritykset kaikille HTML-elementeille. CSS-ohjelmistokehykset ovat yksinkertaistetusti valmiita CSS-kirjastoja ja käytettäessä kehystä HTML-tiedostossa tulee määrittää HTML-elementeille käytettävän kehyksen mukaiset luokat ja ID:t.
CSS-ohjelmistokehykset voivat sisältää myös HTML ja JavaScript-komponentteja, joiden avulla voidaan luoda mm. käyttöliittymäelementtejä. Tyypillisiä esimerkkejä CSS-ohjelmistokehyksien sisältämistä käyttöliittymäelementeistä ovat painikkeet, lomakkeet, valintaikkunat ja navigointivalikot. Kehykset voivat sisältää myös kuvakkeita em. elementeille.
CSS-ohjelmistokehysten hyötynä voidaan pitää nopeaa ja helpottunutta sivuston ulkoasun, asettelun ja responsiivisuuden luomista. Käytettäessä kehystä työmäärä on pienempi kuin ilman kehystä, jolloin kehittäjä loisi vastaavat rakenteet alusta alkaen. Heikkoutena voidaan pitää vastaavasti raskautta, koska kaikkia käytettävän kehyksen osuuksia ei välttämättä hyödynnetä, jolloin ne ovat ylimääräistä koodia, joka hidastaa sivuston toimintaa. Tämä voi käytännössä näkyä etenkin mobiiliympäristöissä. 
CSS-ohjlemistokehykset huomioivat yleisesti myös hyvin yhteensopivudeen eri selainten kanssa. Kehysten käyttäminen voi myös näin ollen vähentää yhteensopivuusongelmia.
Tunnettuja CSS-ohjelmistokehyksiä ovat mm. Bootstrap, Tailwind, Foundation ja Googlen Material-muotokieleen perustuva Materialize. Kehysten laajuus, ominaisuudet, muokattavuus ja sisältö vaihtelevat kehyksittäin.
