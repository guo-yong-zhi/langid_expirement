Το σύνολο εντολών  ή αρχιτεκτονική συνόλου εντολών , είναι το τμήμα της αρχιτεκτονικής υπολογιστών που συνδέεται με τον προγραμματισμό και περιλαμβάνει τους τύπους δεδομένων της μηχανής, τις εντολές, τους καταχωρητές, τους τρόπους διευθυνσιοδότησης , την αρχιτεκτονική μνήμης, τον χειρισμό διακοπών και εξαιρέσεων, καθώς και την εξωτερική είσοδο/έξοδο  . Μια αρχιτεκτονική συνόλου εντολών περιλαμβάνει το σύνολο των μνημονικών εντολών  της γλώσσας μηχανής, και τις εντολές που υλοποιούνται από τον ίδιο τον επεξεργαστή.  1 
Η αρχιτεκτονική συνόλου εντολών διαφέρει από τη μικροαρχιτεκτονική, η οποία είναι το σύνολο των τεχνικών σχεδίασης επεξεργαστών, που χρησιμοποιείται για την υλοποίηση του συνόλου εντολών. Υπολογιστές με διαφορετικές μικροαρχιτεκτονικές μπορούν να έχουν το ίδιο σύνολο εντολών. Για παράδειγμα, ο Pentium της Intel και ο Athlon της AMD υλοποιούν σχεδόν ίδιες εκδόσεις του συνόλου εντολών x86, αλλά έχουν σημαντικά διαφορετικές εσωτερικές σχεδιάσεις. Η αρχιτεκτονική συνόλου εντολών IA32 σχεδιάστηκε από την εταιρία Intel για του επεξεργαστές της ίδιας εταιρίας. Η ανταγωνιστική εταιρία AMD υλοποίησε επεξεργαστές διαφορετικής αρχιτεκτονικής από αυτούς της Intel αλλά χρησιμοποίησε το ίδιο ακριβώς σύνολο εντολών IA32 . Το 2002 περίπου η AMD επέκτεινε το σύνολο εντολών Intel-IA32 στο νέο σύνολο x86-64 για να υποστηρίζονται συστήματα 64 bit τα οποία μπορούν να χρησιμοποιηθούν χώρους διεύθυνσης μνήμης μέχρι 256 terrabytes . Η Intel με το IA32 απευθυνόταν σε μηχανήματα 32bit όπου μπορούσαν να χρησιμοποιούν χώρο διεύθυνσης μνήμης μέχρι 4 gbytes .Η AMD εκτός από το σύνολο εντολών x86-64 την εποχή εκεί κατάφερε και έβγαλε στην αγορά επεξεργαστή γρηγορότερο από 1 GHz.   2  Η επέκταση της AMD στο νέο σύνολο x86-64 επέτρεψε να μπορούν να χρησιμοποιηθούν χώροι διεύθυνσης μνήμης μέχρι 256 terrabytes . Το σύνολο εντολών x86-64 στην συνέχεια υιοθετήθηκε και από την Intel για την κατασκευή επεξεργαστών. Το σύνολο εντολών x86-64 ενσωματώνει λειτουργίες για δημιουργία βελτιωμένου κώδικα μηχανής.  3 
Κάποιες εικονικές μηχανής  που υποστηρίζουν κώδικα byte , όπως αυτές της Smalltalk και της Java, καθώς και η εικονική μηχανή Common Language Runtime της Microsoft σαν αρχιτεκτονική συνόλου εντολών, την υλοποιούν μεταφράζοντας τον κώδικα byte από συχνά χρησιμοποιούμενα μονοπάτια κώδικα σε κώδικα μηχανής, και εκτελούν τα λιγότερο συχνά χρησιμοποιούμενα μονοπάτια με διερμηνεία. Για παράδειγμα, με αυτόν τον τρόπο, η Transmeta υλοποίησε το σύνολο εντολών x86 σε επεξεργαστές VLIW.
Η TIMI  ήταν μια ιδιαίτερη αρχιτεκτονική συνόλου εντολών που εμφανίστηκε στους IBM System/38 και IBM AS/400. Υλοποιήθηκε από λογισμικό χαμηλού επιπέδου που μετέφραζε τον κώδικα TIMI σε κώδικα μηχανής, παρέχοντας λειτουργίες που σήμερα θα αποδίδονταν σε μια «εικονική μηχανή» . Σχεδιάστηκε για να αυξήσει τον χρόνο ζωής της πλατφόρμας και των εφαρμογών της, επιτρέποντας τη μεταφορά ολόκληρης της πλατφόρμας σε πολύ διαφορετικό υλικό χωρίς να χρειάζεται μετατροπή στο λογισμικό εκτός από τον μεταφραστή από TIMI σε γλώσα μηχανής, και από τον κώδικα που υλοποιεί τις υπηρεσίες που χρησιμοποιούνται από τον κώδικα μηχανής που προκύπτει. Αυτό επέτρεψε στην IBM να μεταφέρει την πλατφόρμα AS/400 από μια παλιά αρχιτεκτονική CISC στην νεότερη αρχιτεκτονική POWER χωρίς να πρέπει να γράψει πάλι ή να μεταγλωττίσει μέρη του λειτουργικού συστήματος ή του λογισμικού, εκτός από τον κώδικα χαμηλού επιπέδου που αναφέρθηκε πριν.
Η γλώσσα μηχανής κατασκευάζεται από διακριτές εντολές . Στην αρχιτεκτονική που εκτελείται, μια εντολή μπορεί να ορίζει:
Συνδυάζοντας αυτές τις απλές εντολές μπορούν να προκύψουν πιο σύνθετες εντολές, οι οποίες  εκτελούνται ακολουθιακά ή όπως ορίζουν οι εντολές ροής ελέγχου .
Κάποιες εντολές που υπάρχουν στα περισσότερα σύνολα εντολών είναι οι εξής:
Κάποιοι υπολογιστές περιλαμβάνουν "σύνθετες" εντολές στο σύνολο εντολών τους. Μια "σύνθετη" εντολή κάνει κάτι που μπορεί να χρειάζεται περισσότερες από μια εντολές σε άλλους υπολογιστές. Τέτοιες εντολές είναι αυτές που χρειάζονται παραπάνω από ένα βήματα, ελέγχουν πολλαπλές λειτουργικές μονάδες ή κάνουν κάποια λειτουργία σε μεγαλύτερη κλίμακα από τις περισσότερες απλές εντολές που υλοποιεί ένας επεξεργαστής. Παραδείγματα "σύνθετων" εντολών είναι:
Ένας τύπος σύνθετων εντολών που έχει γίνει πολύ δημοφιλής πρόσφατα είναι η λειτουργία SIMD  ή διανυσματική εντολή , μια λειτουργία που εκτελεί την ίδια αριθμητική πράξη σε πολλά δεδομένα ταυτόχρονα. Η SIMD μπορεί να χειρίζεται μεγάλα διανύσματα και πίνακες πολύ γρήγορα. Οι εντολές SIMD επιτρέπουν τον εύκολο παραλληλισμό των αλγορίθμων που συναντώνται συχνά στην επεξεργασία ήχου, εικόνας και βίντεο. Πολλές υλοποιήσεις SIMD έχουν κυκλοφορήσει στην αγορά με ονόματα όπως το MMX, το 3DNow! και το AltiVec.
Στις παραδοσιακές αρχιτεκτονικές, μια εντολή περιλαμβάνει έναν κωδικό  που ορίζει τη λειτουργία που θα εκτελεστεί, όπως για παράδειγμα "πρόσθεσε περιεχόμενα της μνήμης στον καταχωρητή" και μηδέν ή παραπάνω τελεστέους , που μπορεί να ορίζουν κάποιον καταχωρητή, θέσεις μνήμης, ή σταθερές. Οι τελεστέοι μπορεί να περιλαμβάνουν τρόπους σχηματισμού διευθύνσεων , οι οποίοι να καθορίζουν τη σημασία τους, ή να βρίσκονται σε σταθερά πεδία.
Στις αρχιτεκτονικές πολύ μεγάλης λέξης εντολής , στις οποίες ανήκουν πολλές αρχιτεκτονικές μικροκώδικα, πολλοί ταυτόχρονοι κωδικοί και τελεστέοι ορίζονται με μια μόνο εντολή.
Κάποια σπάνια σύνολα εντολών δεν έχουν πεδίο κωδικού  ή η εικονική μηχανή της Forth), μόνο τελεστέους. Άλλα ασυνήθιστα σύνολα εντολών χωρίς τελεστέους  δεν έχουν πεδία για τον ορισμό των τελεστέων, όπως κάποιες μηχανές στοίβας, για παράδειγμα η NOSC .
Το μέγεθος ή μήκος μιας εντολής διαφέρει σημαντικά, από τέσσερα μπιτ σε κάποιους μικροελεγκτές σε εκατοντάδες μπιτ σε κάποια συστήματα VLIW. Οι επεξεργαστές που χρησιμοποιούνται στους προσωπικούς υπολογιστές, στους μεγάλους υπολογιστές , και στους υπερυπολογιστές έχουν μεγέθη εντολής που κυμαίνονται από τα 8 μέχρι τα 64 bit . Σε ένα σύνολο εντολών, διαφορετικές εντολές μπορεί να έχουν διαφορετικά μεγέθη. Σε κάποιες αρχιτεκτονικές, ειδικά στις RISC, οι εντολές έχουν σταθερό μήκος, συνήθως ίσο με το μέγεθος λέξης της αρχιτεκτονικής. Σε άλλες αρχιτεκτονικές, οι εντολές έχουν μεταβαλλόμενο μήκος, συνήθως ακέραια πολλαπλάσια του byte ή μισής λέξης .
Οι εντολές που αποτελούν ένα πρόγραμμα σπάνια γράφονται με την εσωτερική, αριθμητική τους μορφή. Ο προγραμματιστής συνήθως τις γράφει χρησιμοποιώντας συμβολική γλώσσα  ή, συχνότερα, παράγονται αυτόματα από έναν μεταγλωττιστή.
Η σχεδίαση ενός συνόλου εντολών είναι πολύπλοκο θέμα. Στην ιστορία των μικροεπεξεργαστών συναντώνται δύο προσεγγίσεις. Η πρώτη ήταν η CISC , η οποία είχε πολλές διαφορετικές εντολές. Κατά τη δεκαετία του 1970 όμως, εταιρείες όπως η IBM βρήκαν μετά από έρευνα ότι πολλές εντολές του συνόλου εντολών μπορούσαν να παραλειφθούν. Το αποτέλεσμα ήταν η αρχιτεκτονική RISC , η οποία χρησιμοποιεί μικρότερο σύνολο εντολών. Ένα απλούστερο σύνολο εντολών μπορεί να προσφέρει υψηλότερες ταχύτητες, μικρότερο μέγεθος μικροεπεξεργαστή και μειωμένη κατανάλωση ενέργειας. Ένα πιο πολύπλοκο σύνολο εντολών όμως μπορεί να εκτελεί αποδοτικά συχνές λειτουργίες, να εκμεταλλεύεται καλύτερα την μνήμη και την κρυφή μνήμη  ή να απλοποιεί τον προγραμματισμό.
Κάποιοι σχεδιαστές συνόλων εντολών διατηρούν κάποιους κωδικούς εντολών για κλήσεις συστήματος ή διακοπές λογισμικού. Για παράδειγμα ο MOS Technology 6502 χρησιμοποιεί την 00H, ο Zilog Z80 χρησιμοποιεί τους οκτώ κωδικούς C7,CF,D7,DF,E7,EF,F7,FFH 4  ενώ ο Motorola 68000 χρησιμοποιεί κωδικούς στο εύρος A000..AFFFH .
Οι εικονικές μηχανές μπορούν να υλοποιηθούν γρήγορα και εύκολα αν ένα σύνολο εντολών ικανοποιεί τις απαιτήσεις εικονικοποίησης των Πόπεκ και Γκόλντμπεργκ .
Σε συστήματα με πολλούς επεξεργαστές οι αλγόριθμοι συγχρονισμού χωρίς αναμονή  είναι πιο εύκολο νε υλοποιηθούν αν το σύνολο εντολών υποστηρίζει κάποια λειτουργία του τύπου «φόρτωσε και αύξησε κατά ένα»  ή «φόρτωσε συνδεδεμένο/αποθήκευσε συνθήκη»  ή «σύγκρινε και αντάλλαξε ατομικά» .
Κάθε σύνολο εντολών μπορεί να υλοποιηθεί με πολλούς τρόπους. Όλοι αυτοί οι τρόποι θα δώσουν το ίδιο προγραμματιστικό μοντέλο και θα μπορούν να εκτελούν τα ίδια εκτελέσιμα δυαδικά προγράμματα. Οι διαφορετικοί τρόποι υλοποίησης όμως επηρεάζουν άλλες παραμέτρους όπως για παράδειγμα το κόστος, η ταχύτητα, η κατανάλωση ενέργειας ή το μέγεθος του μικροεπεξεργαστή.
Όταν σχεδιάζει την μικροαρχιτεκτονική ενός επεξεργαστή, ένας μηχανικός χρησιμοποιεί «μπλοκ» από έτοιμα κυκλώματα όπως οι αθροιστές, οι πολυπλέκτες, οι μετρητές, οι καταχωρητές, οι αριθμητικές και λογικές μονάδες, κ.α. Στη συνέχεια χρησιμοποιείται μια γλώσσα μεταφοράς καταχωρητών  που να περιγράφει την αποκωδικοποίηση και την διάταξη για εκτέλεση κάθε εντολής του συνόλου εντολών, σε αυτήν την συγκεκριμένη μικροαρχιτεκτονική.
Υπάρχουν δύο βασικοί τρόποι να κατασκευαστεί μια μονάδα ελέγχου  που να υλοποιεί αυτήν την περιγραφή :
Υπάρχουν κάποιες νέες σχεδιάσεις επεξεργαστών που μεταγλωττίζουν τον σύνολο εντολών σε μια εγγράψιμη RAM ή μνήμη φλας μέσα στην κεντρική μονάδα επεξεργασίας , 5  ή σε ένα FPGA . Ένα παλαιότερο παράδειγμα είναι ο MCP-1600 της Western Digital, ο οποίος χρησιμοποιεί μια ξεχωριστή ROM αποκλειστικά για τον μικροκώδικα.
Μια αρχιτεκτονική συνόλου εντολών μπορεί να προσομοιωθεί σε λογισμικό από έναν διερμηνέα. Αυτό είναι πιο αργό σε σχέση με την απευθείας εκτέλεση προγραμμάτων σε υλικό, λόγω της επιβάρυνσης της διερμηνείας, εκτός αν το υλικό που εκτελεί τον προσομοιωτή είναι πολύ γρηγορότερο. Σήμερα συχνά οι κατασκευαστές νέων αρχιτεκτονικών συνόλου εντολών παρέχουν προσομοιωτές λογισμικού στους προγραμματιστές πριν να είναι έτοιμη η υλοποίηση του υλικού.
Συχνά οι λεπτομέρειες της υλοποίησης επηρεάζουν την επιλογή των εντολών του συνόλου εντολών. Για παράδειγμα, πολλές υλοποιήσεις της σωλήνωσης εντολών  επιτρέπουν μόνο μια φόρτωση ή μια εγγραφή στη μνήμη ανά εντολή, με αποτέλεσμα να προκύπτει μια αρχιτεκτονική RISC τύπου φόρτωσης-αποθήκευσης . Ένα άλλο παράδειγμα είναι οι πρώτοι τρόποι με τους οποίους υλοποιήθηκε η σωλήνωση εντολών με χρήση σχισμής καθυστέρησης .
Οι απαιτήσεις της ψηφιακής επεξεργασίας σήματος υψηλής ταχύτητας αντίθετα πιέζουν για την υλοποίηση εντολών με συγκεκριμένο τρόπο. Για παράδειγμα, για την υλοποίηση γρήγορων ψηφιακών φίλτρων, η εντολή MAC σε έναν κλασικό ψηφιακό επεξεργαστή σήματος  πρέπει να υλοποιηθεί με χρήση κάποιου τύπου αρχιτεκτονικής Χάρβαρντ που να μπορεί να φέρνει μια εντολή και δύο λέξεις δεδομένων ταυτόχρονα, και να χρειάζεται έναν πολλαπλασιαστή που να πολλαπλασιάζει-αθροίζει σε έναν κύκλο.
Η μνήμη ήταν ακριβή στις πρώτους υπολογιστές με αποτέλεσμα τα προγράμματα να έπρεπε να είναι όσο πιο μικρά γινόταν ώστε να χωρούν στην περιορισμένη μνήμη και το συνολικό μέγεθος των εντολών που χρειάζονταν για μια λειτουργία, η πυκνότητα κώδικα , ήταν βασικό χαρακτηριστικό κάθε συνόλου εντολών. Οι υπολογιστές με υψηλή πυκνότητα κώδικα είχαν  εντολές για την είσοδο σε διαδικασία , επιστροφή με παραμέτρους , δομές επανάληψης  κλπ. . Συνήθως όμως οι εντολές "CISC" απλά συνδύαζαν μια βασική αριθμητική ή λογική λειτουργία με την προσπέλαση ενός ή περισσότερων τελεστέων στη μνήμη . Κάποιες αρχιτεκτονικές μπορεί να επιτρέπουν δύο ή τρεις τελεστέους  από τη μνήμη ή μπορούν να εκτελούν λειτουργίες όπως η αυτόματη αύξηση δεικτών στη μνήμη κατά ένα. Τα σύνολα εντολών που υλοποιούνται σε λογισμικό μπορεί να έχουν ακόμα πιο σύνθετες και ισχυρές εντολές.
Οι υπολογιστές περιορισμένου συνόλου εντολών , αρχικά υλοποιήθηκαν σε μεγάλη κλίμακα στη διάρκεια μιας περιόδου που τα υποσυστήματα μνήμης μεγάλωναν με γρήγορους ρυθμούς και θυσιάζουν την πυκνότητα κώδικα με σκοπό την απλοποίηση των κυκλωμάτων τους, ώστε να μπορούν να έχουν μεγαλύτερη συχνότητα και περισσότερους καταχωρητές και άρα να είναι πιο γρήγοροι. Οι εντολές RISC συχνά εκτελούν μόνο μια λειτουργία, όπως η πρόσθεση καταχωρητών ή η φόρτωση δεδομένων από μια θέση μνήμης σε έναν καταχωρητή ενώ συνήθως χρησιμοποιούν σταθερό μέγεθος εντολής, σε αντίθεση με ένα τυπικό σύνολο εντολών CISC που μπορεί να έχει εντολές μικρότερες από αυτό το σταθερό μήκος. Ο χειρισμός εντολών σταθερού μήκους είναι πιο εύκολος σε σχέση με τις εντολές μεταβλητού μήκους για διάφορους λόγους , με αποτέλεσμα να είναι πιο εύκολο να βελτιστοποιηθεί για μεγαλύτερη ταχύτητα εκτέλεσης. Όμως, επειδή οι υπολογιστές RISC συνήθως χρειάζονται περισσότερες και μεγαλύτερες εντολές για να υλοποιήσουν μια λειτουργία, κάνουν λιγότερο καλή χρήση της διαμεταγωγής του διαύλου και των κρυφών μνημών.
Οι υπολογιστές μικρού συνόλου εντολών  είναι μηχανές στοίβας , όπου υπάρχουν λίγες εντολές , με αποτέλεσμα πολλές εντολές να μπορούν να χωρέσουν σε μια λέξη μηχανής. Αυτοί οι επεξεργαστές χρειάζονται λιγότερο πυρίτιο για την υλοποίησή τους και για αυτό μπορούν να υλοποιηθούν σε μορφή FPGA ή πολυπύρηνων  επεξεργαστών. Η πυκνότητα κώδικα μοιάζει με αυτήν των RISC και η αυξημένη πυκνότητα εντολών εξισορροπείται από το γεγονός ότι χρειάζονται περισσότερες εντολές για μια λειτουργία.
Έχει γίνει επίσης έρευνα πάνω στην συμπίεση εκτελέσιμων  για τη βελτίωση της πυκνότητας κώδικας. Η μαθηματική θεωρία της πολυπλοκότητα Κολμογκόροβ  περιγράφει τα ανοιχτά προβλήματα και τους περιορισμούς αυτής της προσέγγισης.
Τα σύνολα εντολών κατηγοριοποιούνται με βάση τον μέγιστο αριθμό τελεστέων που δηλώνονται ρητά στις εντολές τους.
 διευθύνσεις θέσεων μνήμης, ενώ ονόματα της μορφής reg1 αναφέρονται σε καταχωρητές του υπολογιστή.)
Λόγω του μεγάλου αριθμού bit που χρειάζονται για την κωδικοποίηση των τριών καταχωρητών μιας εντολής 3 τελεστέων, οι επεξεργαστές RISC που χρησιμοποιούν εντολές 16-bit είναι μηχανές 2 τελεστέων, όπως ο Atmel AVR, ο TI MSP430 και κάποιες εκδόσεις του ARM Thumb.
Οι επεξεργαστές RISC που χρησιμοποιούν εντολές 32-bit είναι συνήθως μηχανές 3 τελεστέων, όπως οι επεξεργαστές που υλοποιούν την αρχιτεκτονική Power, την αρχιτεκτονική SPARC, την αρχιτεκτονική MIPS, την αρχιτεκτονική ARM και την αρχιτεκτονική AVR32.
Κάθε εντολή ορίζει ρητά έναν αριθμό τελεστέων . Κάποιες εντολές δίνουν έναν ή και τους δύο τελεστέους έμμεσα, τοποθετώντας τους για παράδειγμα την κορυφή της στοίβας ή σε κάποιον καταχωρητή που εννοείται. Όταν κάποιοι τελεστέοι δίνονται έμμεσα, ο αριθμός των τελεστέων που ορίζονται σε μια εντολή είναι μικρότερος από τον αριθμό  των ορισμάτων της λειτουργίας. Όταν δίνεται κάποιος «τελεστέος προορισμού», ο αριθμός των ορισμάτων σε μια εντολή είναι μεγαλύτερος από τον αριθμό των ορισμάτων της λειτουργίας. Κάποια σύνολα εντολών έχουν διαφορετικούς αριθμούς ορισμάτων για διαφορετικές εντολές.
Ο κατάλογος που ακολουθεί δεν είναι πλήρης, καθώς εξακολουθεί η ανάπτυξη των παλιών αρχιτεκτονικών και δημιουργούνται νέες αρχιτεκτονικές. Πολλοί μικροεπεξεργαστές και μικροελεγκτές που είναι διαθέσιμοι στην αγορά υλοποιούν αρχιτεκτονικές συνόλου εντολών.  Σε κάποιες εφαρμογές είναι συχνές και οι εξειδικευμένες αρχιτεκτονικές συνόλου εντολών, όπως στα ASIC, στα FPGA και στο πεδίο του reconfigurable computing.
