Η ταξινόμηση με εισαγωγή  είναι ένας απλός αλγόριθμος ταξινόμησης που δημιουργεί τον τελικό ταξινομημένο πίνακα  αλλάζοντας ένα στοιχείο κάθε φορά. Είναι λιγότερο αποτελεσματική σε μεγάλες λίστες σε αντίθεση με άλλους αλγορίθμους όπως είναι η γρήγορη ταξινόμηση , η ταξινόμηση με σωρό , ή η ταξινόμηση με συγχώνευση . Ωστόσο, η ταξινόμηση με εισαγωγή παρέχει πολλά πλεονεκτήματα:
Όταν οι άνθρωποι ταξινομούν κάτι με μη αυτόματο τρόπο , όπως είναι, για παράδειγμα, μία τράπουλα, οι περισσότεροι χρησιμοποιούν μία μέθοδο παρόμοια με αυτή της ταξινόμησης με εισαγωγή. 1 
Η ταξινόμηση με εισαγωγή εκτελεί συνεχόμενες επαναλήψεις αλλάζοντας ένα στοιχείο εισόδου σε κάθε επανάληψη και δημιουργώντας με αυτόν τον τρόπο μία ταξινομημένη λίστα εξόδου. Σε κάθε επανάληψη, η ταξινόμηση με εισαγωγή μετακινεί ένα στοιχείο από τη λίστα εισόδου, αφού έχει βρει την τοποθεσία που ανήκει η ταξινομημένη λίστα και το εισάγει εκεί. Τη διαδικασία αυτή την επαναλαμβάνει μέχρι να μην υπάρχουν άλλα στοιχεία εισόδου.
Η επιλογή των στοιχείων γίνεται την ίδια στιγμή, με επανάληψη σε όλο τον πίνακα, και τοποθετώντας το επιλεγμένο στοιχείο στην ταξινομημένη λίστα με αποτέλεσμα να μεγαλώνει η λίστα κατά μία θέση. Σε κάθε θέση του πίνακα ελέγχει την τιμή σύμφωνα με τη μεγαλύτερη τιμή στην ταξινομημένη λίστα . Εάν είναι μεγαλύτερη, τότε αφήνει το στοιχείο στη θέση του και μετακινείται προς την επόμενη θέση. Εάν είναι μικρότερη τότε βρίσκει τη σωστή θέση με βάση την ταξινομημένη λίστα και μεταθέτει όλες τις μεγαλύτερες τιμές μέχρι να δημιουργηθεί ένα κενό και εισάγει σε αυτό τη σωστή τιμή.
Ο τελικός πίνακας μετά από k επαναλήψεις έχει την ιδιότητα ότι και η k+1 καταχώρηση θα είναι ταξινομημένη . Σε κάθε επανάληψη η πρώτη υπόλοιπη καταχώρηση από την είσοδου αφαιρείται και εισάγεται στη σωστή θέση το αποτέλεσμα, επεκτείνοντας έτσι το αποτέλεσμα:
Πίνακας εισόδου
Γίνεται:
Με κάθε στοιχείο μεγαλύτερο του x να αντιγράφεται στα δεξιά μετά από σύγκριση με αυτό.
Η πιο συνηθισμένη παραλλαγή της ταξινόμησης με εισαγωγή, η οποία λειτουργεί με πίνακες, μπορεί να περιγραφεί όπως παρακάτω:
Ακολουθεί ο ψευδοκώδικας ενός ολοκληρωμένου αλγορίθμου, όπου οι πίνακες είναι αρχικοποιημένοι με μηδέν:
       //οι τιμές στον πίνακα Α ελέγχονται με τη σειρά, ξεκινώντας από το δεύτερο στοιχείο 
    for     i     ←     1     to     i     ←     length    -1 
       
         //η θέση-τρύπα είναι στη σωστή θέση, οπότε τοποθετούμε την τιμή valueToInsert μέσα στη  
         //θέση-τρύπα 
        A       ←     valueToInsert 
        //ο πίνακας A είναι τώρα ταξινομημένος 
      } 
    struct     LIST 
 ; 
 struct     LIST     *     SortList   
  
             else 
                
</pr