В математике кодирование Чёрча означает представление  данных и операторов в процедуре лямбда-исчисления. Необходимость процедуры вызвана тем, что в чистом лямбда-исчислении среди термов присутствуют только переменные и отсутствуют константы. Для того, чтобы получить объекты, ведущие себя таким же образом как и числа, применяется кодирование Чёрча. Сама процедура названа в честь Алонзо Чёрча, разработавшего лямбда-исчисление и впервые применившего этот метод кодирования данных. По аналогии с числами, кодирование Чёрча может быть применено и для представления объектов других типов, ведущих себя как константы.
Термы, которые в других нотациях обычно являются примитивами , в кодировке Черча представляются при помощи функций высшего порядка. В одной из своих формулировок тезис Тьюринга - Чёрча утверждает, что в кодировке Чёрча может быть представлен любой вычислимый оператор . В бестиповом лямбда-исчислении единственным примитивным типом данных являются функции, а все остальные сущности конструируются при помощи кодирования Чёрча.
Кодировка Черча, как правило, не используется для практической реализации примитивных типов данных. Она используется для целей доказательной демонстрации того, что для проведения вычислений другие примитивные типы данных не обязательны.
Нумералы Чёрча являются представлениями натуральных чисел в кодировании Чёрча. Функция высшего порядка, которая представляет натуральное число n, является функцией, которая отображает любую функцию 
  
    
      
        f
      
    
    
  
 в ее n-кратную композицию. Проще говоря, «значение» нумерала эквивалентно тому, сколько раз функция инкапсулирует свой аргумент.
Все нумералы Чёрча являются функциями с двумя параметрами. Нумералы Чёрча  '0' ,  '1' ,  '2' , …, определены в лямбда-исчислении следующим образом:
  
    
      
        0
         
        f
         
        x
      
    
    
  
 значит «не применять функцию 
  
    
      
        f
      
    
    
  
 к 
  
    
      
        x
      
    
    
  
 вообще», 
  
    
      
        1
         
        f
         
        x
      
    
    
  
 значит «применять функцию 1 раз» и т. д.:
Нумерал Чёрча 3 представляет процесс троекратного применения любой используемой функции f. Эта функция последовательно применяется сначала к переданному ей параметру, а затем — к полученному в результате её предыдущего применения результату.
Арифметические операции над числами могут быть представлены функциями над нумералами Чёрча. Эти функции могут быть определены в лямбда-исчислении или реализованы в большинстве функциональных языков программирования .
Булеаны Чёрча — это результат кодирования Чёрча применённого к представлению логических значений true и false. Некоторые языки программирования используют их в качестве модели реализации для булевой арифметики. Примерами таких языков являются Smalltalk и Pico.
Булева логика может рассматриваться как выбор. Кодирование Чёрча для логических значений является функцией двух параметров:
Эти два определения известны как булеаны Чёрча:
Это определение позволяет предикатам  непосредственно работать как условиям if:
Функция, возвращающая логическое значение, которое затем применяется к двум параметрам, возвращает либо первый, либо второй параметр:
разрешается как then-clause если предикат x разрешается как истина, и как else-clause если предикат x разрешается как ложь.
Поскольку true и false соответствуют выбору первого или второго параметра этой функции, этот формализм может быть использован для реализации стандартных логических операторов. Обратите внимание, что существуют две версии реализации оператора not, в зависимости от выбранной стратегии разрешения выражения.
Несколько примеров:
Предикаты — это функции, возвращающие логическое значение.
Наиболее фундаментальным предикатом является 
  
    
      
        IsZero
      
    
     }
  
, который возвращает 
  
    
      
        true
      
    
     }
  
 , если его аргумент является нумералом Чёрча 
  
    
      
        0
      
    
    
  
, и 
  
    
      
        false
      
    
     }
  
 , если его аргумент является любым другим нумералом Чёрча:
Этот предикат проверяет, является ли его первый аргумент меньшим или равным, по сравнению со вторым:
В связи с идентичностью,
проверка на равeнство может быть реализована следующим способом:
См. также: cons
Пары Чёрча — это представление в кодировании Чёрча парного типа, то есть кортежа из двух значений. Пара представляется как функция, которая принимает другую функцию в качестве аргумента. Результатом работы этой функции является применение аргумента к двум компонентам пары. Определение в лямбда-исчислении:
Пример:
 список состоит из узлов. Ниже приводятся основные операции для списков:
Ниже даются четыре различных представления списков:
Непустой список может быть реализован парой Чёрча;
Однако, таким способом не получится выразить пустой список, потому что у нас не определено представление пустого значения . Чтобы представить его и получить возможность кодировать пустые списки, пара может быть обёрнута в другую пару.
Используя эту идею базовые операции со списками можно выразить следующим образом: 1 
В пустом списке доступ ко второму элементу  никогда не применяется, постольку, поскольку понятия головы и хвоста списка применимы только к непустым спискам.
В качестве альтернативы, списки можно определить следующим образом: 2 
где последнее определение — это специальный случай более общей функции:
В качестве альтернативы кодированию с использованием пар Чёрча список можно закодировать, отождествив его с правоассоциативной функцией свёртки. Например, список из трех элементов x, y и z может быть закодирован функцией высшего порядка, которая при применении к комбинатору c и значению n возвращает c x ).
Ещё одним альтернативным представлением является представление списков через кодирование Скотта, которое использует идею продолжения и может привести к упрощению кода 3 . . В этом подходе мы используем тот факт, что списки можно обрабатывать путём сопоставления с образцом.
