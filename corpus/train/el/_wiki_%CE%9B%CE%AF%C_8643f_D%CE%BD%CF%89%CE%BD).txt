Στην Επιστήμη υπολογιστών, μία λίστα ή ακολουθία είναι ένας Αφηρημένος τύπος δεδομένων που υλοποιεί μία διατεταγμένη συλλογή από τιμές, όπου η ίδια τιμή μπορεί να εμφανίζεται περισσότερες από μία φορά. Ένα παράδειγμα λίστας είναι η υπολογιστική αναπαράσταση μιας μαθηματικά ορισμένης, πεπερασμένης ακολουθίας. Κάθε στιγμιότυπο μιας τιμής της λίστας καλείται συνήθως αντικείμενο ή στοιχείο της λίστας; αν η ίδια τιμή εμφανίζεται πολλές φορές, κάθε εμφάνισή της θεωρείται ένα διακριτό αντικείμενο.
Το όνομα λίστα χρησιμοποιείται επίσης για διάφορες δομές δεδομένων που μπορούν να χρησιμοποιηθούν για την υλοποίηση αφηρημένων λιστών και ειδικότερα για συνδεδεμένες λίστες.
Οι αποκαλούμενες στατικές λίστες δεδομένων επιτρέπουν μόνο τον έλεγχο και ενημέρωση των τιμών της. Μία λίστα που μπορεί να μεταβληθεί ή αλλιώς δυναμική λίστα μπορεί να επιτρέπει την εισαγωγή, αντικατάσταση ή εξαγωγή των αντικειμένων της.
Πολλές γλώσσες προγραμματισμού παρέχουν υποστήριξη για λίστες ως τύπο δεδομένων, και έχουν ειδική σύνταξη και σημασιολογία αλλά και λειτουργίες πάνω σε αυτές. Μια λίστα συχνά κατασκευάζεται γράφοντας τα αντικείμενά της στη σειρά, χωρισμένα με κόμμα, ερωτηματικό ή κενό, ανάμεσα σε ένα ζευγάρι οριοθετών όπως παρενθέσεις '', αγκύλες, '', άγκιστρα '' ή γωνιακές αγκύλες '<>'. Ορισμένες γλώσσες μπορεί να επιτρέπουν τύπους λιστών να δεικτοδοτούνται ή να διαχωρίζονται όπως οι πίνακες. Στις γλώσσες αντικειμενοστρεφούς προγραμματισμού, οι λίστες συνήθως παρέχονται ως στιγμιότυπα υποκλάσεων μιας γενικής κλάσης "λίστας". Οι λίστες συνήθως υλοποιούνται χρησιμοποιώντας πίνακες ή συνδεδεμένες λίστες κάποιου είδους, αλλά διαφορετικές δομές δεδομένων μπορεί να είναι καταλληλότερες για ορισμένες εφαρμογές. Σε κάποια περιβάλλοντα, όπως αυτό της γλώσσας προγραμματισμού Lisp, ο όρος λίστα μπορεί να αναφέρεται ειδικά  σε συνδεδεμένη λίστα και όχι σε πίνακα.
Στην Θεωρία τύπων και στον συναρτησιακό προγραμματισμό, οι αφηρημένες λίστες ορίζονται συνήθως επαγωγικά με τέσσερις λειτουργίες: κενό  που δημιουργεί την κενή λίστα, προσάρτηση , που προσθέτει ένα στοιχείο στην αρχή της λίστας, κεφαλή , που επιστρέφει το πρώτο στοιχείο της λίστας και ουρά  που επιστρέφει τη λίστα χωρίς το πρώτο στοιχείο. Επισήμως, οι φυσικοί Aριθμοί Peano μπορούν να οριστούν ως αφηρημένες λίστες με στοιχεία του μοναδιαίου τύπου.
Οι υλοποιήσεις της λίστας ως τύπου δεδομένου μπορούν να παρέχουν ορισμένες από τις ακόλουθες λειτουργίες:
Οι λίστες έχουν τις ακόλουθες ιδιότητες:
Οι λίστες τυπικά υλοποιούνται είτε ως συνδεδεμένες λίστες  είτε ως πίνακες .
Ο συνήθης τρόπος υλοποίησης λιστών, που προέρχεται από τη γλώσσα προγραμματισμού Lisp, είναι κάθε στοιχείο της λίστας να περιέχει την τιμή του μαζί με έναν δείκτη προς το επόμενο στοιχείο της λίστας. Αυτό έχει ως αποτέλεσμα τη δημιουργία είτε μίας συνδεδεμένης λίστας είτε ενός δέντρου, ανάλογα με το αν η λίστα έχει ή όχι εμφωλευμένες υπολίστες. Κάποιες παλαιότερες υλοποιήσεις της Lisp  υποστηρίζουν επίσης "συμπιεσμένες λίστες"  η οποία είχε μία ειδική εσωτερική αναπαράσταση . Τις λίστες μπορούμε να τις διαχειριστούμε με χρήση επαναληπτικών διαδικασιών ή αναδρομής. Ο πρώτος όρος προτιμάται συχνά σε γλώσσες προστακτικού προγραμματισμού, ενώ ο δεύτερος σε γλώσσες συναρτησιακού προγραμματισμού.
Οι λίστες μπορούν να υλοποιηθούν και ως αυτο-ισορροπημένα δέντρα δυαδικής αναζήτησης κρατώντας ζεύγη τιμών-δεικτών και παρέχοντας πρόσβαση ίσου κόστους σε οποιοδήποτε στοιχείο απαιτώντας λογαριθμικό χρόνο στο μέγεθος της λίστας. Όσο δεν γίνονται συχνές ανανεώσεις στη δομή  δίνεται η ψευδαίσθηση της τυχαίας πρόσβασης, ενώ οι λειτουργίες ανταλλαγής και προσάρτησης στοιχείων γίνονται επίσης σε λογαριθμικό χρόνο.
Σε κάποιες υλοποιήσεις γλωσσών δεν υπάρχει η λίστα ως δομή δεδομένων, αλλά προσφέρεται η δυνατότητα χρήσης συσχετιστικών πινάκων ή κάποιου είδους πίνακα που προσομοιώνει τη λειτουργία της. Για παράδειγμα, η γλώσσα προγραμματισμού Lua παρέχει πίνακες. Παρόλο που η Lua αποθηκεύει λίστες που έχουν αριθμητικές τιμές εσωτερικά ως πίνακες, εξακολουθούν να ορίζονται ως πίνακες κατακερματισμού.
Στην Lisp, οι λίστες  είναι θεμελιώδεις δομές δεδομένων που μπορούν να αναπαραστήσουν κώδικα και δεδομένα μαζί. Στις περισσότερες διαλέκτους, η λίστα για τους τρεις πρώτους πρώτους αριθμούς μπορεί να γραφεί ως εξής . Σε διάφορες διαλέκτους της Lisp, συμπεριλαμβανομένης της γλώσσας προγραμματισμού Scheme, η λίστα είναι μία συλλογή από ζεύγη, αποτελούμενα από μία τιμή και ένα δείκτη προς το επόμενο ζεύγος , δημιουργώντας ουσιαστικά μία απλά συνδεδεμένη λίστα.
Όπως φαίνεται και από το όνομα, οι λίστες μπορούν να χρησιμοποιηθούν για την αποθήκευση εγγραφών. Τα στοιχεία μιας λίστας μπορούν να ταξινομηθούν στοχεύοντας σε ταχύτερη αναζήτηση .
Επειδή στον προγραμματισμό οι λίστες είναι περισσότερο κατανοητές από τα σύνολα, ένα πεπερασμένο σύνολο με τη μαθηματική έννοια μπορεί να υλοποιηθεί σαν μια λίστα με επιπρόσθετους περιορισμούς, όπως για παράδειγμα την απαγόρευση διπλών εγγραφών. Εάν η λίστα είναι ταξινομημένη, επιταχύνεται η απόφαση για το εάν ένα δεδομένο αντικείμενο είναι ήδη στη λίστα αλλά καθώς θέλουμε η διάταξη να διατηρείται, απαιτείται περισσότερος χρόνος για την εισαγωγή ενός νέου αντικείμενου σε αυτήν. Σε αποδοτικές υλοποιήσεις τα σύνολα υλοποιούνται με τη χρήση αυτο-ισορροπημένων δέντρων δυαδικής αναζήτησης ή πινάκων κατακερματισμού, παρά με τη χρήση λιστών.
Ο αφηρημένος τύπος λίστας L με στοιχεία ενός τύπου E  ορίζεται με τις εξής συναρτήσεις,
και με τα αξιώματα,
Για οποιοδήποτε στοιχείο e και οποιαδήποτε λίστα l, συνεπάγεται ότι:
Να τονίσουμε ότι τα first ) και rest ) δεν ορίζονται.
Αυτά τα αξιώματα είναι ισοδύναμα με αυτά της αφηρημένης στοίβας ως τύπου δεδομένων.
Στην θεωρία τύπων, ο επάνω ορισμός θεωρείται απλούστερα ως επαγωγικός τύπος δεδομένων ορισμένος σε όρους των κατασκευαστών nil και cons. Σε αλγεβρικούς όρους, μπορεί να αναπαρασταθεί ως ο μετασχηματισμός 1 + E   L → L.  Τότε τα first και rest  λαμβάνονται με ταίριασμα προτύπων στον κατασκευαστή cons και με ξεχωριστή διαχείριση για την περίπτωση του nil.
Ο τύπος της λίστας σχηματίζει μία μονάδα με τις ακόλουθες συναρτήσεις :
όπου το append ορίζεται ως εξής:
Εναλλακτικά, η μονάδα μπορεί να οριστεί σε όρους των λειτουργιών return, fmap και join, με τους εξής ορισμούς:
Παρατηρούμε ότι οι fmap,  join, append και bind είναι καλά-ορισμένες, διότι εφαρμόζονται σε ορίσματα που σταδιακά βρίσκονται όλο και πιο βαθιά  σε κάθε αναδρομική κλήση.
Ο τύπος της λίστας είναι μία προσθετική μονάδα, με το κενό  ως μηδενικό της μονάδας και το append ως την αθροιστική μονάδα.
Οι λίστες σχηματίζουν ένα μονοειδές υπό την λειτουργία του append. Το αναγνωριστικό στοιχείο του μονοειδούς είναι η κενή λίστα . Ουσιαστικά, πρόκειται για το ελεύθερο μονοειδές πάνω από το σύνολο των στοιχείων της λίστας.
